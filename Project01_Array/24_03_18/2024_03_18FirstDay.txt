유니티 가격정책 때문에 현재는 자체 엔진 만들고 있는 시기


1. 자료구조 : 사용이유, 장단점, 사용시기, 비교 
	.선형 자료구조 : 순차적 저장
		배열, 리스트(동적배열), 스택, 큐, 링크드 리스트
		
	.비선형 자료구조 : 특별한 요구사항 때문에 만들어짐
		해시테이블, 트리 ,이진검색트리

		(검색이 빠르다/자료 넣을 때 복잡) 
		(서버 - 아이디, 글 찾기 : 트리 사용)
		이진검색트리, 레드블랙트리
		
		# 만들어보셨나요?
		# 핵심이 무엇인가요?



2. 알고리즘(겉핥기)

	Big O Notation >
		nl 
		2^n
		//n^세제곱까지 현업에서 사용한다. 
		n^2 
		nlogN
		N  
		logN 
		1

	시간 복잡도 : 파이법, 최상 최악 평균을 가정하는 경우도 존재한다.
	개략적인 분류를 하기위해 작성된 것으로 참고할 자료로써 사용하기를 권한다.

	직접 측정하는 것이 제일 중요한다. Time 찍고 n만번 돌린 다음, 평균 내는 것이 정확

	O(c) : c contant 상수 <-> Variable 변수
	크기에 상관없이 항상 수행 시간이 동일하다.

	O(n) : 선형함수

	O(n^2) : 삼제곱까지 다룬다.
	

	- 어떤 함수의 복잡도를 정의하는데 사용하는 한 가지 지식
	- 

-------------------------------------------------

int - integer 정수 4Byte (32bit) 메모리 공간 
float - 점이 둥둥떠다닌다. 부동 소숫점 (컴퓨터가 저장하는 방법)
char - character 문자 타입 = Int32 

국내는 돈이 안된다 -> 게임 배포를 스팀으로 한다 (금액이 보장되기 때문이다) 
언어패치 : 인코딩 + 플랫폼

기반 프로그램을 만드는 소프트웨어 회사는 인코딩 팀이 존재한다.



유니티 덴마크에서 만들어짐 : 영어권 
기본체계는 못 바꾼다.
현재는 잘 나오지만..


bit 연산이 제일 빠르다.
연산과 물리는 숨만 쉬어도 들어간다.

Layer 체크만 필요하기 때문에 4byte * (8bit) = 32개

# 검색할 것 : UTF
# CheatSheet > 많이 사용하는 함수 목록 기억하기
# 인덱서 공부하기
# Enumerator 돌 수 있게 구현하기

# Default Scripts txt 수정하는 방법
#
   //물체가 생성조건 == 공간이 있어야 하고, 카운트가 범위내 있어야 함
        if (prefab != null && _itemCount < itemSpawnLimit)
        {
            items[_itemCount++] = Instantiate(
                prefab, 
                new Vector3(startPositionX * _itemCount *1.5f,0,0 ), //
                Quaternion.identity
                );
            Debug.Log("<color=green> Success To Create new Item </color>");
            return;
        }


#https://gameprogrammingpatterns.com/contents.html

#참고서적 : 자료구조 책을 본다면 추상자료형을 설명하는가 여부를 보기